{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar MessagingScreen = function MessagingScreen(_ref) {\n  var route = _ref.route;\n  var username = route.params.username;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    message = _useState2[0],\n    setMessage = _useState2[1];\n  var handleSend = function handleSend() {\n    console.log(message);\n    setMessage('');\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.username,\n      children: username\n    }), _jsx(TextInput, {\n      style: styles.input,\n      value: message,\n      onChangeText: setMessage,\n      placeholder: \"Type your message here\"\n    }), _jsx(TouchableOpacity, {\n      style: styles.sendButton,\n      onPress: handleSend,\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Send\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n    backgroundColor: '#fff'\n  },\n  username: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 16\n  },\n  input: {\n    borderWidth: 1,\n    borderColor: '#ccc',\n    borderRadius: 8,\n    padding: 8,\n    marginBottom: 16\n  },\n  sendButton: {\n    backgroundColor: '#007AFF',\n    padding: 12,\n    borderRadius: 8\n  },\n  buttonText: {\n    color: '#fff',\n    fontSize: 18,\n    fontWeight: 'bold',\n    textAlign: 'center'\n  }\n});\nexport default MessagingScreen;","map":{"version":3,"names":["React","useState","View","Text","TextInput","TouchableOpacity","StyleSheet","jsx","_jsx","jsxs","_jsxs","MessagingScreen","_ref","route","username","params","_useState","_useState2","_slicedToArray","message","setMessage","handleSend","console","log","style","styles","container","children","input","value","onChangeText","placeholder","sendButton","onPress","buttonText","create","flex","padding","backgroundColor","fontSize","fontWeight","marginBottom","borderWidth","borderColor","borderRadius","color","textAlign"],"sources":["C:/Users/Onur/event-planner/screens/Message/Message.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, TextInput, TouchableOpacity, StyleSheet } from 'react-native';\r\n\r\nconst MessagingScreen = ({ route }) => {\r\n  const { username } = route.params;\r\n  const [message, setMessage] = useState('');\r\n\r\n  const handleSend = () => {\r\n    console.log(message);\r\n    // send message logic here\r\n    setMessage('');\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.username}>{username}</Text>\r\n      <TextInput\r\n        style={styles.input}\r\n        value={message}\r\n        onChangeText={setMessage}\r\n        placeholder=\"Type your message here\"\r\n      />\r\n      <TouchableOpacity style={styles.sendButton} onPress={handleSend}>\r\n        <Text style={styles.buttonText}>Send</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 16,\r\n    backgroundColor: '#fff',\r\n  },\r\n  username: {\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n    marginBottom: 16,\r\n  },\r\n  input: {\r\n    borderWidth: 1,\r\n    borderColor: '#ccc',\r\n    borderRadius: 8,\r\n    padding: 8,\r\n    marginBottom: 16,\r\n  },\r\n  sendButton: {\r\n    backgroundColor: '#007AFF',\r\n    padding: 12,\r\n    borderRadius: 8,\r\n  },\r\n  buttonText: {\r\n    color: '#fff',\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n  },\r\n});\r\n\r\nexport default MessagingScreen;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,UAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAGxC,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAAAC,IAAA,EAAkB;EAAA,IAAZC,KAAK,GAAAD,IAAA,CAALC,KAAK;EAC9B,IAAQC,QAAQ,GAAKD,KAAK,CAACE,MAAM,CAAzBD,QAAQ;EAChB,IAAAE,SAAA,GAA8Bf,QAAQ,CAAC,EAAE,CAAC;IAAAgB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAnCG,OAAO,GAAAF,UAAA;IAAEG,UAAU,GAAAH,UAAA;EAE1B,IAAMI,UAAU,GAAG,SAAbA,UAAUA,CAAA,EAAS;IACvBC,OAAO,CAACC,GAAG,CAACJ,OAAO,CAAC;IAEpBC,UAAU,CAAC,EAAE,CAAC;EAChB,CAAC;EAED,OACEV,KAAA,CAACR,IAAI;IAACsB,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAC5BnB,IAAA,CAACL,IAAI;MAACqB,KAAK,EAAEC,MAAM,CAACX,QAAS;MAAAa,QAAA,EAAEb;IAAQ,CAAO,CAAC,EAC/CN,IAAA,CAACJ,SAAS;MACRoB,KAAK,EAAEC,MAAM,CAACG,KAAM;MACpBC,KAAK,EAAEV,OAAQ;MACfW,YAAY,EAAEV,UAAW;MACzBW,WAAW,EAAC;IAAwB,CACrC,CAAC,EACFvB,IAAA,CAACH,gBAAgB;MAACmB,KAAK,EAAEC,MAAM,CAACO,UAAW;MAACC,OAAO,EAAEZ,UAAW;MAAAM,QAAA,EAC9DnB,IAAA,CAACL,IAAI;QAACqB,KAAK,EAAEC,MAAM,CAACS,UAAW;QAAAP,QAAA,EAAC;MAAI,CAAM;IAAC,CAC3B,CAAC;EAAA,CACf,CAAC;AAEX,CAAC;AAED,IAAMF,MAAM,GAAGnB,UAAU,CAAC6B,MAAM,CAAC;EAC/BT,SAAS,EAAE;IACTU,IAAI,EAAE,CAAC;IACPC,OAAO,EAAE,EAAE;IACXC,eAAe,EAAE;EACnB,CAAC;EACDxB,QAAQ,EAAE;IACRyB,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,MAAM;IAClBC,YAAY,EAAE;EAChB,CAAC;EACDb,KAAK,EAAE;IACLc,WAAW,EAAE,CAAC;IACdC,WAAW,EAAE,MAAM;IACnBC,YAAY,EAAE,CAAC;IACfP,OAAO,EAAE,CAAC;IACVI,YAAY,EAAE;EAChB,CAAC;EACDT,UAAU,EAAE;IACVM,eAAe,EAAE,SAAS;IAC1BD,OAAO,EAAE,EAAE;IACXO,YAAY,EAAE;EAChB,CAAC;EACDV,UAAU,EAAE;IACVW,KAAK,EAAE,MAAM;IACbN,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,MAAM;IAClBM,SAAS,EAAE;EACb;AACF,CAAC,CAAC;AAEF,eAAenC,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}